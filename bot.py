#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import time
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
BASE_URL = f'https://api.telegram.org/bot{TOKEN}/'

# –¢–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
THEORY = {
    "basics": """üìö **–û—Å–Ω–æ–≤–∏ C/C++**

**–Ü—Å—Ç–æ—Ä—ñ—è:**
‚Ä¢ C —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ 1972 —Ä–æ—Ü—ñ –î–µ–Ω—ñ—Å–æ–º –†—ñ—Ç—á—ñ
‚Ä¢ C++ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ 1985 —Ä–æ—Ü—ñ –ë'—è—Ä–Ω–æ–º –°—Ç—Ä–∞—É—Å—Ç—Ä—É–ø–æ–º

**–ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ–≥—Ä–∞–º–∏:**
```c
#include <stdio.h>
int main() {
    printf("Hello, World!\\n");
    return 0;
}
```""",
    
    "variables": """üìä **–ó–º—ñ–Ω–Ω—ñ —Ç–∞ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö**

**–û—Å–Ω–æ–≤–Ω—ñ —Ç–∏–ø–∏:**
‚Ä¢ `int` - —Ü—ñ–ª—ñ —á–∏—Å–ª–∞
‚Ä¢ `float` - –¥—ñ–π—Å–Ω—ñ —á–∏—Å–ª–∞  
‚Ä¢ `char` - —Å–∏–º–≤–æ–ª–∏
‚Ä¢ `double` - –ø–æ–¥–≤—ñ–π–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å

**–ü—Ä–∏–∫–ª–∞–¥:**
```c
int age = 25;
float pi = 3.14f;
char grade = 'A';
```""",
    
    "operators": """üî¢ **–û–ø–µ—Ä–∞—Ç–æ—Ä–∏**

**–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω—ñ:**
‚Ä¢ `+` - –¥–æ–¥–∞–≤–∞–Ω–Ω—è
‚Ä¢ `-` - –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è
‚Ä¢ `*` - –º–Ω–æ–∂–µ–Ω–Ω—è
‚Ä¢ `/` - –¥—ñ–ª–µ–Ω–Ω—è

**–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:**
‚Ä¢ `==` - —Ä—ñ–≤–Ω—ñ—Å—Ç—å
‚Ä¢ `!=` - –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å
‚Ä¢ `>`, `<` - –±—ñ–ª—å—à–µ, –º–µ–Ω—à–µ"""
}

# –¢–µ—Å—Ç–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è
QUESTIONS = [
    {"q": "–•—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤ C?", "opts": ["–î–µ–Ω—ñ—Å –†—ñ—Ç—á—ñ", "–ë'—è—Ä–Ω –°—Ç—Ä–∞—É—Å—Ç—Ä—É–ø", "–ë—ñ–ª–ª –ì–µ–π—Ç—Å"], "ans": 0},
    {"q": "–¢–∏–ø –¥–ª—è —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª?", "opts": ["float", "int", "char"], "ans": 1},
    {"q": "–ö—ñ–Ω–µ—Ü—å —Ä—è–¥–∫–∞ –≤ C?", "opts": ["\\0", "\\n", ";"], "ans": 0},
    {"q": "–§—É–Ω–∫—Ü—ñ—è –≤–∏–≤–æ–¥—É –≤ C?", "opts": ["print()", "printf()", "cout"], "ans": 1},
    {"q": "–†–æ–∑–º—ñ—Ä char?", "opts": ["1 –±–∞–π—Ç", "2 –±–∞–π—Ç–∏", "4 –±–∞–π—Ç–∏"], "ans": 0}
]

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}

def send_message(chat_id, text, reply_markup=None):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    response = requests.post(BASE_URL + 'sendMessage', data=data)
    return response.json()

def edit_message(chat_id, message_id, text, reply_markup=None):
    """–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    data = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    response = requests.post(BASE_URL + 'editMessageText', data=data)
    return response.json()

def get_main_keyboard():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    return {
        'inline_keyboard': [
            [{'text': 'üìö –¢–µ–æ—Ä—ñ—è', 'callback_data': 'theory'}],
            [{'text': 'üìù –¢–µ—Å—Ç', 'callback_data': 'test'}],
            [{'text': 'üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è', 'callback_data': 'links'}]
        ]
    }

def get_theory_keyboard():
    """–ú–µ–Ω—é —Ç–µ–æ—Ä—ñ—ó"""
    return {
        'inline_keyboard': [
            [{'text': 'üî§ –û—Å–Ω–æ–≤–∏ C/C++', 'callback_data': 't_basics'}],
            [{'text': 'üìä –ó–º—ñ–Ω–Ω—ñ —Ç–∞ —Ç–∏–ø–∏', 'callback_data': 't_variables'}],
            [{'text': 'üî¢ –û–ø–µ—Ä–∞—Ç–æ—Ä–∏', 'callback_data': 't_operators'}],
            [{'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'menu'}]
        ]
    }

def get_back_keyboard(callback_data='menu'):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    return {
        'inline_keyboard': [
            [{'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': callback_data}]
        ]
    }

def handle_start(chat_id):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    text = """ü§ñ **–í—ñ—Ç–∞—é –≤ C/C++ Trainer!**

–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –≤–∏–≤—á–∏—Ç–∏ –æ—Å–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –Ω–∞ C —Ç–∞ C++.

**–©–æ —è –º–æ–∂—É:**
üìö –ù–∞–¥–∞—Ç–∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
üìù –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞–Ω—å  
üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ—Ä–∏—Å–Ω–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏

–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:"""
    
    send_message(chat_id, text, get_main_keyboard())

def handle_callback(chat_id, message_id, callback_data, user_id):
    """–û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    
    if callback_data == 'menu':
        text = "ü§ñ **C/C++ Trainer**\\n\\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:"
        edit_message(chat_id, message_id, text, get_main_keyboard())
    
    elif callback_data == 'theory':
        text = "üìö **–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è:**"
        edit_message(chat_id, message_id, text, get_theory_keyboard())
    
    elif callback_data.startswith('t_'):
        topic = callback_data[2:]
        if topic in THEORY:
            edit_message(chat_id, message_id, THEORY[topic], get_back_keyboard('theory'))
    
    elif callback_data == 'test':
        import random
        # –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É
        questions = random.sample(QUESTIONS, min(3, len(QUESTIONS)))
        user_states[user_id] = {
            'questions': questions,
            'current': 0,
            'score': 0
        }
        show_question(chat_id, message_id, user_id)
    
    elif callback_data.startswith('ans_'):
        answer = int(callback_data[4:])
        if user_id in user_states:
            state = user_states[user_id]
            current_q = state['questions'][state['current']]
            
            if answer == current_q['ans']:
                state['score'] += 1
                result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
            else:
                correct = current_q['opts'][current_q['ans']]
                result = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ñ–¥–ø–æ–≤—ñ–¥—å: {correct}"
            
            state['current'] += 1
            
            if state['current'] < len(state['questions']):
                keyboard = {
                    'inline_keyboard': [
                        [{'text': '‚û°Ô∏è –î–∞–ª—ñ', 'callback_data': 'next'}]
                    ]
                }
                text = f"{result}\\n\\n–ù–∞—Ç–∏—Å–Ω–∏ '–î–∞–ª—ñ' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è"
                edit_message(chat_id, message_id, text, keyboard)
            else:
                # –ö—ñ–Ω–µ—Ü—å —Ç–µ—Å—Ç—É
                score = state['score']
                total = len(state['questions'])
                percent = (score / total) * 100
                
                text = f"""üéâ **–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**

–†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total} ({percent:.0f}%)
{result}

{"üèÜ –í—ñ–¥–º—ñ–Ω–Ω–æ!" if percent >= 80 else "üìö –¢—Ä–µ–±–∞ –≤—á–∏—Ç–∏ –±—ñ–ª—å—à–µ!"}"""
                
                keyboard = {
                    'inline_keyboard': [
                        [{'text': 'üîÑ –©–µ —Ä–∞–∑', 'callback_data': 'test'}],
                        [{'text': 'üè† –ú–µ–Ω—é', 'callback_data': 'menu'}]
                    ]
                }
                edit_message(chat_id, message_id, text, keyboard)
                del user_states[user_id]
    
    elif callback_data == 'next':
        show_question(chat_id, message_id, user_id)
    
    elif callback_data == 'links':
        text = """üîó **–ö–æ—Ä–∏—Å–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏:**

üìñ **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:**
‚Ä¢ [cppreference.com](https://cppreference.com)
‚Ä¢ [learn-c.org](https://www.learn-c.org/)

üíª **–û–Ω–ª–∞–π–Ω –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∏:**
‚Ä¢ [OnlineGDB](https://www.onlinegdb.com/online_c_compiler)
‚Ä¢ [Replit](https://replit.com/languages/c)

üìö **–ö–Ω–∏–≥–∏:**
‚Ä¢ "C Programming Language" - K&R
‚Ä¢ "C++ Primer" - Lippman"""
        
        edit_message(chat_id, message_id, text, get_back_keyboard())

def show_question(chat_id, message_id, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"""
    if user_id in user_states:
        state = user_states[user_id]
        current = state['current']
        q = state['questions'][current]
        
        text = f"üìù **–ü–∏—Ç–∞–Ω–Ω—è {current + 1}/{len(state['questions'])}**\\n\\n‚ùì {q['q']}"
        
        keyboard = {
            'inline_keyboard': [
                [{'text': f"{chr(65+i)}. {opt}", 'callback_data': f'ans_{i}'}] 
                for i, opt in enumerate(q['opts'])
            ]
        }
        
        edit_message(chat_id, message_id, text, keyboard)

def get_updates(offset=None):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    params = {'timeout': 30}
    if offset:
        params['offset'] = offset
    
    response = requests.get(BASE_URL + 'getUpdates', params=params)
    return response.json()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ C/C++ Trainer Bot...")
    print(f"–¢–æ–∫–µ–Ω: {TOKEN[:10]}..." if TOKEN != 'YOUR_BOT_TOKEN_HERE' else "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    response = requests.get(BASE_URL + 'getMe')
    if response.status_code == 200:
        bot_info = response.json()
        if bot_info['ok']:
            print(f"‚úÖ –ë–æ—Ç @{bot_info['result']['username']} —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π!")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–æ–∫–µ–Ω–∞!")
            return
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Telegram API!")
        return
    
    offset = None
    print("üîÑ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å... (Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏)")
    
    try:
        while True:
            updates = get_updates(offset)
            
            if updates['ok']:
                for update in updates['result']:
                    offset = update['update_id'] + 1
                    
                    # –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    if 'message' in update:
                        message = update['message']
                        chat_id = message['chat']['id']
                        
                        if 'text' in message and message['text'] == '/start':
                            handle_start(chat_id)
                    
                    # –û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤
                    elif 'callback_query' in update:
                        callback = update['callback_query']
                        chat_id = callback['message']['chat']['id']
                        message_id = callback['message']['message_id']
                        callback_data = callback['data']
                        user_id = callback['from']['id']
                        
                        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback
                        requests.post(BASE_URL + 'answerCallbackQuery', 
                                    data={'callback_query_id': callback['id']})
                        
                        handle_callback(chat_id, message_id, callback_data, user_id)
            
            time.sleep(1)
    
    except KeyboardInterrupt:
        print("\\nüõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == '__main__':
    main()